$font:       "Roboto";
$font-stack: $font;
$spacing:    auto;
$animiation: "myAnimation";
$condition: null;



@keyframes animiation {
  //
}

// sass comment
.test {
  font-family: $font-stack;
  top: $spacing*2;
  padding: auto;
  margin: {
    left: "auto";
    right: auto;
  }
  margin: {
    top: auto;
    bottom: auto;
  }
}

@media (min-width: 300px) {
  body {
    background-color: #fff;
  }
}

* {
  * {
    color: #000;
  }
}

.parent {
  @media (min-width: 300px) {
    .child {
      background-color: #fff;
    }
  }
}

.block {
  &__element {
    width: 100%;
  }
}

@include mymixin(foo);

@if($condition) {
  content: true;
} @else ($condition) {
  content: false;
}

$font-weights: (
  "regular": 400,
  "medium": 500,
  "bold": 700
);

@each $key in map-keys($font-weights) {
  $value: map-get($font-weights, $key);
}

a {
  font-family: quote("Helvetica");
}

@media (prefers-reduced-motion: reduce) {
  transition: none;
}

@if $condition == null {

}

@import "a.scss";
@import "layer.module";

.numeric-value {
  $_value: 4;

  width: #{$_value}px;
}

@mixin font-size-default {
  font-size: 16px;
}
@mixin font-size-default {
  font-size: 18px;
}

@unknown rule {
  non: sense;
}

.dimension-no-non-numeric-values {
  $value: 4;
  padding: #{value}px;
}

$map-keys-quoted: (
  "key": value,
) !default;

// at-root-no-redundant
/* stylelint-disable scale-unlimited/declaration-strict-value */
@at-root .a { margin: 3px; }

.a { @at-root .b & { margin: 3px; } }

@keyframes slidein {
  @at-root from {
    transform: translateX(0%);
  }

  to {
    transform: translateX(100%);
  }
}
/* stylelint-enable scale-unlimited/declaration-strict-value */

// at-use-no-redundant-alias
@use "partial" as partial;

// function-calculation-no-interpolation
$c: 1 !default;

.a { .b: calc(#{$c + 1}); }
.a { .b: calc(max(#{$c})); }
.a { .b: min(#{$c}); }
.a { .b: clamp(#{$c} + 2px); }

// property-no-unknown
.unknown {
  my-property: 1;
}

.property {
  font: {
    stuff: bold;
  }
}
